Let's start by creating the server side code. We will use Express.js to create a simple server. We will not use a database in this case, as the need for persistence is not explicitly stated. We will store the todos in memory on the server.

server.js

```js
const express = require('express');
const cors = require('cors');
const app = express();
const port = 8080;

app.use(cors());
app.use(express.json());

let todos = [];

app.get('/todos', (req, res) => {
  res.json(todos);
});

app.post('/todos', (req, res) => {
  const todo = req.body;
  todos.push(todo);
  res.json(todo);
});

app.delete('/todos/:id', (req, res) => {
  const id = req.params.id;
  todos = todos.filter(todo => todo.id !== id);
  res.json({ id });
});

app.put('/todos/:id', (req, res) => {
  const id = req.params.id;
  const updatedTodo = req.body;
  todos = todos.map(todo => todo.id === id ? updatedTodo : todo);
  res.json(updatedTodo);
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
```

Next, let's create the client side code. We will use HTML5 and JavaScript to create a simple UI for the todo app. We will use Tailwind CSS for styling.

public/index.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Todo App</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.0.2/dist/tailwind.min.css" rel="stylesheet">
  <script src="main.js" defer></script>
</head>
<body class="bg-gray-800 text-white">
  <div class="container mx-auto p-4">
    <h1 class="text-4xl mb-4">Todo App</h1>
    <form id="todo-form" class="mb-4">
      <input id="todo-input" class="bg-gray-700 rounded p-2 w-full" type="text" placeholder="New todo">
    </form>
    <ul id="todo-list" class="space-y-2"></ul>
  </div>
</body>
</html>
```

public/main.js

```js
const todoForm = document.getElementById('todo-form');
const todoInput = document.getElementById('todo-input');
const todoList = document.getElementById('todo-list');

todoForm.addEventListener('submit', addTodo);

fetchTodos();

function fetchTodos() {
  fetch('http://localhost:8080/todos')
    .then(response => response.json())
    .then(todos => {
      todoList.innerHTML = '';
      todos.forEach(todo => {
        const li = document.createElement('li');
        li.textContent = todo.text;
        li.classList.add('bg-gray-700', 'p-2', 'rounded');
        li.addEventListener('click', () => deleteTodo(todo.id));
        todoList.appendChild(li);
      });
    });
}

function addTodo(event) {
  event.preventDefault();
  const text = todoInput.value;
  const todo = { id: Date.now().toString(), text };
  fetch('http://localhost:8080/todos', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(todo)
  })
    .then(response => response.json())
    .then(todo => {
      todoInput.value = '';
      fetchTodos();
    });
}

function deleteTodo(id) {
  fetch(`http://localhost:8080/todos/${id}`, {
    method: 'DELETE'
  })
    .then(response => response.json())
    .then(() => fetchTodos());
}
```

Finally, let's create the package.json file.

package.json

```json
{
  "name": "todo-app",
  "version": "1.0.0",
  "description": "A simple todo app",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.17.1"
  }
}
```

To run the app, first install the dependencies with `npm install`, then start the server with `npm start`. Open a web browser and navigate to `http://localhost:8080`.